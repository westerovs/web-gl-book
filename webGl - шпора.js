// ====================================================================================
// ====================================================================================
//                                    1 clear
// ====================================================================================
// ====================================================================================
// очистка цветом
gl.clearColor(0.6, 0.0, 0.1, 0.2);
gl.clear(gl.COLOR_BUFFER_BIT)


// ====================================================================================
// ====================================================================================
//                                    2 draw point
// ====================================================================================
// ====================================================================================
// webgl опирается на механизм рисования нового типа, называемого - шейдер,
// обладающий большей гибкостью для рисование 2 и 3х мерных объектов и который должен 
// использоваться всегда, всеми webgl приложениями

//                      язык шейдеров = GLSL ES
void - указывает что ф - ция не имеет возвращаемого значения и отсутствует возможность передачи значений ф - ции main

// вершинный шейдер - определяет координаты точки и её размер. где gl_PointSize = размер
/*
    gl_Position - встр. переменные, доступн только внутри верш. шейдера
    vec4 - встроенный механизм, который коструирует объект из 4х значений - т.е преобразует свои аргументы в вектор и возвращает их
    его аргументы называются:
          x     y   z    w  - однородными координатами
    vec4(0.0, 0.0, 0.0, 1.0);
    значение компонента w всегда должно быть больше или равно нулю.
    При приближ. к нулю, все остальные компоненты стремятся к бесконечности
*/

// для gl_Position - нужно всегда присваивать значение, иначе результат может оказаться неожиданным!
// gl_PointSize  - встр. переменные, доступн только внутри верш. шейдера
// вершинный шейдер
let VSHADER_SOURCE =
    `void main() {
        gl_Position = vec4(0.0, 0.0, 0.0, 1.0); // координаты
        gl_PointSize = 50.0;                    // установить размер точки
    }`;

// фрагментный шейдер - определяет цвет фрагментов
/*
 gl_FragColor - встр. переменные, доступн только внутри фрагментного шейдера,
 она определяет цвет фрагмента
*/
let FSHADER_SOURCE =
    `void main() {
        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);    // установить цвет 
    }`;

// initShaders - вспомогательная ф-ция из книги. её нет в жизни)
initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)
// draw
gl.drawArrays(gl.POINTS, 0, 1);

/*
                mode, first, count
    gl.drawArrays(gl.POINTS, 0, 1);
    mode  - тип фигуры
    first - номер вершины с которой должно нач. рисование
    count - количество вершин(точек)
*/


// ------------------------------------------ точка v2

// attribute vec4 a_Position
// attribute - спецификатор класса хранения
// vec4 - тип
// a_Position - имя переменной

// Что бы передать данные в переменную a_Position находящ. внутри шейдера, необх. запросить у системы WebGl местоположение этой переменной, вызвав метод:
// Что бы передать данные в переменную a_Position находящ. внутри шейдера, необх. запросить у системы WebGl местоположение этой переменной, вызвав метод: getAttributeLocation
getAttributeLocation(gl.program, 'a_Position')
// 1й аргумент - это объект программы, хранящий верш и фраг шейдер
// 2й - имя переменной-атрибута
// Этот метод возвращает ссылку на имя пер.атр, которую требуется получить

//                    1f, 2f, 3f, 4f       - look 69 page
метод`gl.vertexAttrib3f()` - является частью семейства методов, позволяющих устанавливать значения отдельных или всех компонентов переменной - атрибута
число '3f' - указывает что принимает 3 параметра вещественного типа


















